(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global['fast-copy'] = {}));
}(this, function (exports) { 'use strict';

  var create = Object.create,
      getSymbols = Object.getOwnPropertySymbols,
      getPrototypeOf = Object.getPrototypeOf;
  var _Object$prototype = Object.prototype,
      hasOwnProperty = _Object$prototype.hasOwnProperty,
      propertyIsEnumerable = _Object$prototype.propertyIsEnumerable;
  /**
   * @constant {Object} SUPPORTS cache of values supported
   */

  var SUPPORTS = {
    FLAGS: typeof /foo/g.flags === 'string',
    SYMBOL_PROPERTIES: typeof global.Object.getOwnPropertySymbols === 'function',
    WEAKSET: typeof global.WeakSet === 'function'
  };
  /**
   * @function getNewCache
   *
   * @description
   * get a new cache object to prevent circular references
   *
   * @returns {Object|Weakset} the new cache object
   */

  var getNewCache = function getNewCache() {
    return SUPPORTS.WEAKSET ? new WeakSet() : create({
      _values: [],
      add: function add(value) {
        this._values.push(value);
      },
      has: function has(value) {
        return !!~this._values.indexOf(value);
      }
    });
  };
  /**
   * @function getObjectToCopy
   *
   * @description
   * get the object to copy, including appropriate prototype
   *
   * @param {Object} object the object to copy
   * @param {function} RealmObject the realm-specific Object constructor
   * @param {boolean} isPlainObject is the object a plain object
   * @returns {Object} an empty version of the object to copy
   */

  var getObjectToCopy = function getObjectToCopy(object, RealmObject, isPlainObject) {
    if (isPlainObject) {
      var prototype = object.__proto__ || getPrototypeOf(object);
      return prototype === RealmObject.prototype ? {} : create(prototype);
    }

    return object.constructor ? new object.constructor() : create(null);
  };
  /**
   * @function getRegExpFlags
   *
   * @description
   * get the flags to apply to the copied regexp
   *
   * @param {RegExp} regExp the regexp to get the flags of
   * @returns {string} the flags for the regexp
   */

  var getRegExpFlags = function getRegExpFlags(regExp) {
    var flags = '';

    if (regExp.global) {
      flags += 'g';
    }

    if (regExp.ignoreCase) {
      flags += 'i';
    }

    if (regExp.multiline) {
      flags += 'm';
    }

    if (regExp.unicode) {
      flags += 'u';
    }

    if (regExp.sticky) {
      flags += 'y';
    }

    return flags;
  };
  /**
   * @function isObjectCopyable
   *
   * @description
   * is the object able to be copied
   *
   * @param {any} object the object to test
   * @param {Object|Weakset} cache the cache of copied values
   * @returns {boolean} can the object be copied
   */

  var isObjectCopyable = function isObjectCopyable(object, cache) {
    return typeof object === 'object' && object !== null && !cache.has(object);
  };
  /**
   * @function shouldObjectBeCopied
   *
   * @description
   * should the object be copied
   *
   * @param {any} object the object to test
   * @param {any} realm the realm to check instanceof in
   * @returns {boolean} should the object be copied
   */

  var shouldObjectBeCopied = function shouldObjectBeCopied(object, realm) {
    return typeof object.then !== 'function' && !(object instanceof realm.Error) && !(realm.WeakMap && object instanceof realm.WeakMap) && !(realm.WeakSet && object instanceof realm.WeakSet);
  };
  /**
   * @function copyArray
   *
   * @description
   * copy the array, deeply copying the values
   *
   * @param {Array<any>} array the array to copy
   * @param {function} copy the function to copy values
   * @param {any} realm the realm to check instanceof in
   * @returns {Array<any>} the copied array
   */

  var copyArray = function copyArray(array, copy, realm) {
    var newArray = new array.constructor();

    for (var index = 0; index < array.length; index++) {
      newArray[index] = copy(array[index], realm);
    }

    return newArray;
  };
  /**
   * @function copyArrayBuffer
   *
   * @description
   * copy the arrayBuffer, deeply copying the values
   *
   * @param {ArrayBuffer} arrayBuffer the arrayBuffer to copy
   * @returns {ArrayBuffer} the copied bufarrayBufferfer
   */

  var copyArrayBuffer = function copyArrayBuffer(arrayBuffer) {
    return arrayBuffer.slice(0);
  };
  /**
   * @function copyBuffer
   *
   * @description
   * copy the buffer, deeply copying the values
   *
   * @param {Buffer} buffer the buffer to copy
   * @param {any} realm the realm to check instanceof in
   * @returns {Buffer} the copied buffer
   */

  var copyBuffer = function copyBuffer(buffer, realm) {
    var RealmBuffer = realm.Buffer;
    var newBuffer = RealmBuffer.allocUnsafe ? RealmBuffer.allocUnsafe(buffer.length) : new RealmBuffer(buffer.length);
    buffer.copy(newBuffer);
    return newBuffer;
  };
  /**
   * @function copyMap
   *
   * @description
   * copy the map values into a new map
   *
   * @param {Map} map the map to copy
   * @param {function} copy the copy object method
   * @param {Object} realm the realm the constructor resides in
   * @returns {Map} the copied map
   */

  var copyMap = function copyMap(map, copy, realm) {
    var newMap = new map.constructor();
    map.forEach(function (value, key) {
      return newMap.set(key, copy(value, realm));
    });
    return newMap;
  };
  /**
   * @function copySet
   *
   * @description
   * copy the set values into a new set
   *
   * @param {Set} set the set to copy
   * @param {function} copy the copy object method
   * @param {Object} realm the realm the constructor resides in
   * @returns {Set} the copied set
   */

  var copySet = function copySet(set, copy, realm) {
    var newSet = new set.constructor();
    set.forEach(function (value) {
      return newSet.add(copy(value, realm));
    });
    return newSet;
  };
  /**
   * @function copyObject
   *
   * @description
   * copy the object values into a new object of the same type
   *
   * @param {Object} object the object to copy
   * @param {function} copy the copy method
   * @param {any} realm the realm to check instanceof in
   * @param {boolean} isPlainObject is the object to copy a plain object
   * @returns {Object} the copied object
   */

  var copyObject = function copyObject(object, copy, realm, isPlainObject) {
    var newObject = getObjectToCopy(object, realm.Object, isPlainObject);

    for (var key in object) {
      if (hasOwnProperty.call(object, key)) {
        newObject[key] = copy(object[key], realm);
      }
    }

    if (SUPPORTS.SYMBOL_PROPERTIES) {
      var symbols = getSymbols(object);

      if (symbols.length) {
        for (var index = 0, symbol; index < symbols.length; index++) {
          symbol = symbols[index];

          if (propertyIsEnumerable.call(object, symbol)) {
            newObject[symbol] = copy(object[symbol], realm);
          }
        }
      }
    }

    return newObject;
  };
  /**
   * @function copyRegExp
   *
   * @description
   * copy the RegExp to a new RegExp with the same properties
   *
   * @param {RegExp} regExp the RegExp to copy
   * @param {function} RealmRegExp the realm-specific RegExp constructor
   * @returns {RegExp} the copied RegExp
   */

  var copyRegExp = function copyRegExp(regExp, RealmRegExp) {
    var newRegExp = new RealmRegExp(regExp.source, SUPPORTS.FLAGS ? regExp.flags : getRegExpFlags(regExp));
    newRegExp.lastIndex = regExp.lastIndex;
    return newRegExp;
  };
  /**
   * @function copyTypedArray
   *
   * @description
   * copy the typedArray, deeply copying the values
   *
   * @param {TypedArray} typedArray the typedArray to copy
   * @returns {TypedArray} the copied typedArray
   */

  var copyTypedArray = function copyTypedArray(typedArray) {
    return new typedArray.constructor(copyArrayBuffer(typedArray.buffer));
  };

  // utils
  var isArray = Array.isArray;
  /**
   * @function copy
   *
   * @description
   * deeply copy the object to a new object of the same type
   *
   * @param {any} object the object to copy
   * @param {any} [realm=global] the realm to check instanceof in
   * @returns {any} the copied object
   */

  function copy(object, realm) {
    if (realm === void 0) {
      realm = global;
    }

    var _realm = realm,
        RealmArrayBuffer = _realm.ArrayBuffer,
        RealmBuffer = _realm.Buffer,
        RealmDate = _realm.Date,
        RealmMap = _realm.Map,
        RealmObject = _realm.Object,
        RealmRegExp = _realm.RegExp,
        RealmSet = _realm.Set;
    var cache = getNewCache();

    var handleCopy = function handleCopy(object) {
      if (!isObjectCopyable(object, cache)) {
        return object;
      }

      if (isArray(object)) {
        cache.add(object);
        return copyArray(object, handleCopy, realm);
      }

      if (object.constructor === RealmObject) {
        cache.add(object);
        return copyObject(object, handleCopy, realm, true);
      }

      if (object instanceof RealmDate) {
        return new RealmDate(object.getTime());
      }

      if (object instanceof RealmRegExp) {
        return copyRegExp(object, RealmRegExp);
      }

      if (RealmMap && object instanceof RealmMap) {
        cache.add(object);
        return copyMap(object, handleCopy, realm);
      }

      if (RealmSet && object instanceof RealmSet) {
        cache.add(object);
        return copySet(object, handleCopy, realm);
      }

      if (RealmBuffer && RealmBuffer.isBuffer(object)) {
        return copyBuffer(object, realm);
      }

      if (RealmArrayBuffer) {
        if (RealmArrayBuffer.isView(object)) {
          return copyTypedArray(object);
        }

        if (object instanceof RealmArrayBuffer) {
          return copyArrayBuffer(object);
        }
      }

      if (shouldObjectBeCopied(object, realm)) {
        cache.add(object);
        return copyObject(object, handleCopy, realm);
      }

      return object;
    };

    return handleCopy(object);
  }

  exports.default = copy;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=fast-copy.js.map
